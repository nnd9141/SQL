ðŸŸ¢ Easy-Level Tasks (10 ta topshiriq)

BULK INSERT taâ€™rif va maqsadi:

BULK INSERT â€” bu SQL Serverda katta hajmdagi maâ€™lumotlarni tashqi fayldan (masalan, CSV, TXT) tez va samarali ichki jadvalga import qilish uchun ishlatiladigan buyruq.


SQL Serverga import qilinishi mumkin boâ€˜lgan 4 ta fayl formati:

- CSV (Comma Separated Values)
- TXT (Text files)
- Excel (XLS, XLSX)
- XML (Extensible Markup Language)


Products jadvalini yaratish:

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    Price DECIMAL(10,2)
);


Products jadvaliga 3 ta yozuv kiritish:

INSERT INTO Products (ProductID, ProductName, Price)
VALUES
(1, 'Kompyuter', 1200.00),
(2, 'Printer', 450.50),
(3, 'Klaviatura', 80.00);


NULL va NOT NULL farqi:

- **NULL**: Ustunda qiymat mavjud emasligini bildiradi, yaâ€™ni boâ€˜sh (no value).
- **NOT NULL**: Ustun qiymat kiritilishi majburiy, boâ€˜sh boâ€˜lishi mumkin emas.


ProductName ustuniga UNIQUE cheklov qoâ€˜shish:

ALTER TABLE Products
ADD CONSTRAINT UQ_ProductName UNIQUE (ProductName);


SQL soâ€˜rov ichida kommentariya yozish:

-- Bu soâ€˜rov Products jadvaliga yangi yozuv qoâ€˜shadi
INSERT INTO Products (ProductID, ProductName, Price)
VALUES (4, 'Monitor', 300.00);


Products jadvaliga CategoryID ustunini qoâ€˜shish:

ALTER TABLE Products
ADD CategoryID INT;


Categories jadvalini yaratish (CategoryID PRIMARY KEY va CategoryName UNIQUE):

CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(50) UNIQUE
);


IDENTITY ustunining maqsadi:

IDENTITY ustuni SQL Serverda avtomatik oâ€˜suvchi raqamli ustun boâ€˜lib, yangi yozuv qoâ€˜shilganda qiymat avtomatik oshib boradi (masalan, ID yaratish uchun).

ðŸŸ  Medium-Level Tasks (10 ta topshiriq)

BULK INSERT bilan fayldan maâ€™lumot import qilish:

BULK INSERT Products
FROM 'C:\Data\products.txt'
WITH (
    FIELDTERMINATOR = ',',  -- ustunlar orasidagi ajratuvchi
    ROWTERMINATOR = '\n',   -- qator ajratuvchi
    FIRSTROW = 2            -- agar birinchi qatorda sarlavha boâ€˜lsa
);


Products jadvaliga FOREIGN KEY qoâ€˜shish (Categories ga bogâ€˜lash):

ALTER TABLE Products
ADD CONSTRAINT FK_Products_Categories
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID);


PRIMARY KEY va UNIQUE KEY oâ€˜rtasidagi farqlar:

- **PRIMARY KEY**: Jadvalda har bir yozuvni noyob aniqlovchi, NOT NULL boâ€˜lishi shart, faqat bitta boâ€˜lishi mumkin.
- **UNIQUE KEY**: Har qanday ustun yoki ustunlar kombinatsiyasida noyob qiymatlar boâ€˜lishini taâ€™minlaydi, NULL qiymatga ruxsat berilishi mumkin, jadvalda bir nechta boâ€˜lishi mumkin.


Price ustuniga CHECK cheklovi qoâ€˜shish (Price > 0):

ALTER TABLE Products
ADD CONSTRAINT CHK_Price_Positive CHECK (Price > 0);


Products jadvaliga Stock ustunini NOT NULL qilib qoâ€˜shish:

ALTER TABLE Products
ADD Stock INT NOT NULL DEFAULT 0;


ISNULL funksiyasi yordamida NULL qiymatlarni 0 bilan almashtirish:

SELECT ProductID, ProductName, ISNULL(Price, 0) AS Price
FROM Products;


FOREIGN KEY cheklovining maqsadi va qoâ€˜llanilishi:

FOREIGN KEY jadvaldagi ustunni boshqa jadvaldagi PRIMARY KEY yoki UNIQUE ustunga bogâ€˜laydi, maâ€™lumotlarning yaxlitligini taâ€™minlaydi (referential integrity). Bu yordamida bogâ€˜langan jadvaldagi mos yozuv oâ€˜chirilsa yoki oâ€˜zgartirilsa, bogâ€˜liq jadvaldagi maâ€™lumotlarga taâ€™siri boshqariladi.

ðŸ”´ Hard-Level Tasks (10 ta topshiriq)

Customers jadvalini yaratish, Age uchun CHECK (Age >= 18):

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    Age INT,
    CONSTRAINT CHK_Age CHECK (Age >= 18)
);


IDENTITY ustuni bilan jadval yaratish (start 100, increment 10):

CREATE TABLE SampleTable (
    ID INT IDENTITY(100, 10) PRIMARY KEY,
    Description VARCHAR(100)
);


OrderDetails jadvalida composite PRIMARY KEY yaratish:

CREATE TABLE OrderDetails (
    OrderID INT,
    ProductID INT,
    Quantity INT,
    PRIMARY KEY (OrderID, ProductID)
);


COALESCE va ISNULL funksiyalarining NULL bilan ishlashi:

- **ISNULL(expr, replacement)**: expr NULL boâ€˜lsa replacement qiymat qaytaradi. Faqat ikki argument oladi.
- **COALESCE(expr1, expr2, ..., exprN)**: berilgan ifodalardan birinchisi NULL boâ€˜lmagan qiymatni qaytaradi. Koâ€˜p argumentli.


Employees jadvalini yaratish, PRIMARY KEY va UNIQUE KEY (Email) bilan:

CREATE TABLE Employees (
    EmpID INT PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100) UNIQUE
);


FOREIGN KEY bilan ON DELETE CASCADE va ON UPDATE CASCADE yozuvi:

ALTER TABLE Orders
ADD CONSTRAINT FK_Orders_Customers
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
ON DELETE CASCADE
ON UPDATE CASCADE;
