Easy-Level Tasks (10):

Find the minimum (MIN) price of a product in the Products table:

SELECT MIN(Price) AS MinPrice FROM Products;


Find the maximum (MAX) Salary from the Employees table:

SELECT MAX(Salary) AS MaxSalary FROM Employees;


Count the number of rows in the Customers table:

SELECT COUNT(*) AS CustomerCount FROM Customers;


Count the number of unique product categories from the Products table:

SELECT COUNT(DISTINCT Category) AS UniqueCategories FROM Products;


Find the total sales amount for the product with id 7 in the Sales table:

Assuming the Sales table is Orders and total sales amount is TotalAmount for product id 7:

SELECT SUM(TotalAmount) AS TotalSalesForProduct7 FROM Orders WHERE ProductID = 7;


Calculate the average age of employees in the Employees table:

SELECT AVG(Age) AS AvgAge FROM Employees;


Count the number of employees in each department:

SELECT DepartmentName, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY DepartmentName;


Show the minimum and maximum Price of products grouped by Category:

SELECT Category, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice
FROM Products
GROUP BY Category;


Calculate the total sales per Customer in the Sales table:

Assuming Sales table = Orders:

SELECT CustomerID, SUM(TotalAmount) AS TotalSales
FROM Orders
GROUP BY CustomerID;


Filter departments having more than 5 employees from the Employees table:

SELECT DepartmentName, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY DepartmentName
HAVING COUNT(*) > 5;

Easy-Level Tasks (10):

Find the minimum (MIN) price of a product in the Products table:

SELECT MIN(Price) AS MinPrice FROM Products;


Find the maximum (MAX) Salary from the Employees table:

SELECT MAX(Salary) AS MaxSalary FROM Employees;


Count the number of rows in the Customers table:

SELECT COUNT(*) AS CustomerCount FROM Customers;


Count the number of unique product categories from the Products table:

SELECT COUNT(DISTINCT Category) AS UniqueCategories FROM Products;


Find the total sales amount for the product with id 7 in the Sales table:

Assuming the Sales table is Orders and total sales amount is TotalAmount for product id 7:

SELECT SUM(TotalAmount) AS TotalSalesForProduct7 FROM Orders WHERE ProductID = 7;


Calculate the average age of employees in the Employees table:

SELECT AVG(Age) AS AvgAge FROM Employees;


Count the number of employees in each department:

SELECT DepartmentName, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY DepartmentName;


Show the minimum and maximum Price of products grouped by Category:

SELECT Category, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice
FROM Products
GROUP BY Category;


Calculate the total sales per Customer in the Sales table:

Assuming Sales table = Orders:

SELECT CustomerID, SUM(TotalAmount) AS TotalSales
FROM Orders
GROUP BY CustomerID;


Filter departments having more than 5 employees from the Employees table:

SELECT DepartmentName, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY DepartmentName
HAVING COUNT(*) > 5;

Medium-Level Tasks:

Find the average Salary of employees in each Department:

SELECT DepartmentName, AVG(Salary) AS AvgSalary
FROM Employees
GROUP BY DepartmentName;


Find the second highest salary in the Employees table:

SELECT MAX(Salary) AS SecondHighestSalary
FROM Employees
WHERE Salary < (SELECT MAX(Salary) FROM Employees);


Retrieve all employees who earn more than the average salary:

SELECT *
FROM Employees
WHERE Salary > (SELECT AVG(Salary) FROM Employees);


Find Customers who have not placed any Orders:

SELECT CustomerID, CustomerName
FROM Customers
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);


Get the total number of orders placed by each Customer along with Customer name:

SELECT c.CustomerName, COUNT(o.OrderID) AS TotalOrders
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerName;


Find Products which have never been ordered:

SELECT ProductID, ProductName
FROM Products
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM Orders);


Find the most expensive product in each category:

SELECT p1.Category, p1.ProductName, p1.Price
FROM Products p1
WHERE Price = (
    SELECT MAX(Price) FROM Products p2 WHERE p2.Category = p1.Category
);


Calculate the total revenue generated by each product category:

SELECT p.Category, SUM(o.TotalAmount) AS TotalRevenue
FROM Products p
JOIN Orders o ON p.ProductID = o.ProductID
GROUP BY p.Category;


Get the list of Employees with their Department names (assuming Departments table exists):

SELECT e.EmployeeName, d.DepartmentName
FROM Employees e
JOIN Departments d ON e.DepartmentID = d.DepartmentID;


Find the cumulative sum of Sales Amount ordered by OrderDate:

SELECT OrderID, OrderDate, TotalAmount,
       SUM(TotalAmount) OVER (ORDER BY OrderDate) AS CumulativeSales
FROM Orders;

Hard-Level Tasks:

Find the nth highest salary (e.g., 3rd highest) in Employees table:

SELECT DISTINCT Salary
FROM Employees
ORDER BY Salary DESC
LIMIT 1 OFFSET 2;


(Change OFFSET for nth highest)

Get the top 3 customers who placed the highest number of orders:

SELECT c.CustomerName, COUNT(o.OrderID) AS OrderCount
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerName
ORDER BY OrderCount DESC
LIMIT 3;


Find employees who have a salary higher than their manager:

SELECT e1.EmployeeName, e1.Salary, e2.EmployeeName AS ManagerName, e2.Salary AS ManagerSalary
FROM Employees e1
JOIN Employees e2 ON e1.ManagerID = e2.EmployeeID
WHERE e1.Salary > e2.Salary;


Find the department with the highest average salary:

SELECT DepartmentName, AVG(Salary) AS AvgSalary
FROM Employees
GROUP BY DepartmentName
ORDER BY AvgSalary DESC
LIMIT 1;


Find customers who placed orders in every month of a specific year:

SELECT CustomerID
FROM Orders
WHERE YEAR(OrderDate) = 2023
GROUP BY CustomerID
HAVING COUNT(DISTINCT MONTH(OrderDate)) = 12;


Find employees who joined in the last 3 months and have salary greater than the average salary:

SELECT *
FROM Employees
WHERE JoinDate >= DATEADD(MONTH, -3, GETDATE())
AND Salary > (SELECT AVG(Salary) FROM Employees);


Write a query to transpose rows to columns (pivot) showing sales per month:

SELECT CustomerID,
       SUM(CASE WHEN MONTH(OrderDate) = 1 THEN TotalAmount ELSE 0 END) AS Jan,
       SUM(CASE WHEN MONTH(OrderDate) = 2 THEN TotalAmount ELSE 0 END) AS Feb,
       SUM(CASE WHEN MONTH(OrderDate) = 3 THEN TotalAmount ELSE 0 END) AS Mar
FROM Orders
GROUP BY CustomerID;


Get the running total of orders for each customer by order date:

SELECT CustomerID, OrderDate, TotalAmount,
       SUM(TotalAmount) OVER (PARTITION BY CustomerID ORDER BY OrderDate) AS RunningTotal
FROM Orders;


Find employees who do not have a manager (top-level employees):

SELECT *
FROM Employees
WHERE ManagerID IS NULL;


Find the difference in days between two dates in Orders table (OrderDate and DeliveryDate):

SELECT OrderID, OrderDate, DeliveryDate,
       DATEDIFF(DAY, OrderDate, DeliveryDate) AS DeliveryDuration
FROM Orders;
